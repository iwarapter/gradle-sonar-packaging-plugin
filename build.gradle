plugins {
	id "com.gradle.plugin-publish" version "0.9.2"
	id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/sonar.gradle"
apply from: "$rootDir/gradle/groovydoc.gradle"

group = 'com.iadams.plugins'
version = '0.1.3-SNAPSHOT'
description = 'Gradle plugin for packaging SonarQube plugins.'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    jcenter()
}
dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'

    testCompile gradleTestKit()
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', {
      exclude module: 'groovy-all'
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// Add the classpath file to the test runtime classpath
dependencies {
  testRuntime files(createClasspathManifest)
}

pluginBundle {
    website = 'https://github.com/iwarapter/gradle-sonar-packaging-plugin'
    vcsUrl = 'https://github.com/iwarapter/gradle-sonar-packaging-plugin'
    description = 'Plugin for packaging SonarQube plugins.'
    tags = ['sonar', 'sonarqube']

    plugins {
        sonarPackagingPlugin {
            id = 'com.iadams.sonar-packaging'
            displayName = 'Gradle Sonar Packaging Plugin'
        }
    }
}

license {
    header rootProject.file('LICENSE')
    includes(["**/*.java", "**/*.groovy"])
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

build.dependsOn sourcesJar
build.dependsOn groovydocJar

sourceSets {
    integTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task integTest(type: Test) {
    group = 'verification'
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    reports.html.destination = file("$buildDir/reports/integ")
    jvmArgs '-XX:MaxPermSize=256m'
}

task jacocoIntegTestReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData integTest
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoInteg"
    }
}

task jacocoCombinedTestReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData test, integTest
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacocoCombined"
    }
}

integTest.mustRunAfter test
check.dependsOn integTest

//Generate Jacoco Reports after each test task.
test.finalizedBy jacocoTestReport
integTest.finalizedBy jacocoIntegTestReport
integTest.finalizedBy jacocoCombinedTestReport